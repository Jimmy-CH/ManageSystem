[uwsgi]
# 监听内网 IP 和端口（使用 uWSGI 协议，非 HTTP！）
http            = 0.0.0.0:8000
# socket = :8000（或 socket = 0.0.0.0:8000）
# 风险：如果服务器有公网 IP 且防火墙未限制，互联网任何人都能连接！
# socket          = :8000

# 项目路径
home                = /opt/ManageSystem/server/venv
chdir               = /opt/ManageSystem/server/
wsgi-file           = /opt/ManageSystem/server/wsgi.py

# 日志
daemonize           = /opt/ManageSystem/server/logs/uwsgi.log
disable-logging     = True                ;仅记录错误，访问日志由 Nginx 或应用层处理

# 进程
master              = True
workers             = 12
threads             = 3
enable-threads      = True
lazy-apps           = true                 ; 每个 worker 独立加载 Django，避免 fork 问题
thunder-lock        = true                 ; 启用“雷鸣锁”，避免多进程 accept() 竞争（多 worker 必开）
listen              = 1024                 ; 不是限制“总并发数”，而是限制“等待被 accept 的连接数”。
# 关键防护
reload-on-rss       = 300                  ; MB！当 RSS > 300MB 时立即重启 worker
max-requests        = 1500                 ; 每处理 1500 请求重启一次
max-requests-delta  = 300                  ; 随机偏移 0~300

# 超时
harakiri            = 120                  ; 单个请求处理时间超过 120 秒，强制 kill worker（防死循环/慢查询拖垮服务）。
http-timeout        = 300                  ; uWSGI 与客户端（或 Nginx）的 HTTP 连接超时（300 秒）。仅在使用 http = ... 时生效。
reload-mercy        = 10                   ; 发送停止信号后，等待最多 10 秒让 worker 退出，超时则强制 kill。

# 清理
vacuum              = True                 ; 退出时自动清理 socket 文件、PID 文件等。
reaper              = True                 ; 自动回收僵尸子进程（增强稳定性）。
pidfile             = /opt/ManageSystem/server/uwsgi.pid

# 安全
buffer-size         = 65536                ; 增大 uWSGI 内部缓冲区，避免大请求（如文件上传）被截断。
post-buffering      = 8192                 ; 启用 POST 请求缓冲。所有 POST 数据先写入内存/临时文件，再交给应用，防止慢客户端攻击（Slowloris）。
