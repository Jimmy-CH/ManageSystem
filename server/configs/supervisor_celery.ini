# I/O密集型配置
[program:xd_sec_api_celery]
# 程序启动命令：必须加上 -c 并发数，避免资源浪费
command = /opt/ManageSystem/server/venv/bin/celery -A server worker -P gevent -c 300 -l info -E
# cpu密集型启动命令
# command = /opt/ManageSystem/server/venv/bin/celery -A server worker -c 24 -l info -E
# 命令执行目录
directory = /opt/ManageSystem/server/

# 添加环境变量
environment = DJANGO_ENV=production

# 主日志文件（Celery 所有日志统一输出）
stdout_logfile = /opt/ManageSystem/server/logs/celery_worker_info.log
stdout_logfile_maxbytes = 100MB
stdout_logfile_backups = 10

# 错误日志重定向到 stdout（因为 redirect_stderr=true）
stderr_logfile = /opt/ManageSystem/server/logs/celery_worker_err.log
stderr_logfile_maxbytes = 50MB
stderr_logfile_backups = 5

# 捕获字节数（可选）
stdout_capture_maxbytes = 10MB
stderr_capture_maxbytes = 10MB

stdout_events_enabled = false
stderr_events_enabled = false

# 是否自动启动
autostart = true

# 程序意外退出是否自动重启
autorestart = true

# 启动后等待时间（秒），确保 worker 完全启动
startsecs = 10

# 停止等待时间（秒），给协程足够时间退出
stopwaitsecs = 30

# 进程启动优先级
priority = 998

# 进程执行的用户身份
user = deploy

# 启动失败自动重试次数
startretries = 3

# 把 stderr 重定向到 stdout（避免日志分散）
redirect_stderr = true

# 关键：协程模式下必须设置为 true，否则 stop 时子协程不会被杀死
stopasgroup = true
killasgroup = true

# 明确只启动一个 worker 实例
numprocs = 1
process_name = %(program_name)s
