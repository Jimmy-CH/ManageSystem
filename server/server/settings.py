"""
Django settings for server project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
import yaml
import platform
from pathlib import Path
from datetime import timedelta
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
ENVIRONMENT = os.environ.get('DJANGO_ENV', 'development')


CONFIG_FILE = BASE_DIR / 'config.yml'  # 或者 settings/config.yml


def load_yaml_config():
    try:
        with open(CONFIG_FILE, 'r', encoding='utf-8') as file:
            return yaml.safe_load(file)
    except FileNotFoundError:
        raise ImproperlyConfigured(f"Config file {CONFIG_FILE} not found.")
    except yaml.YAMLError as e:
        raise ImproperlyConfigured(f"Error parsing YAML config: {e}")


config_data = load_yaml_config()
try:
    env_config = config_data[ENVIRONMENT]
except KeyError:
    raise ImproperlyConfigured(f"Environment '{ENVIRONMENT}' not found in config.yml.")

SECRET_KEY = env_config['secret_key']
DEBUG = env_config['debug']
print(f"Current Environment: {ENVIRONMENT}")

DATABASES = {
    'default': {
        'ENGINE': env_config['database']['engine'],
        'NAME': env_config['database']['name'],
        'USER': env_config['database']['user'],
        'PASSWORD': env_config['database']['password'],
        'HOST': env_config['database']['host'],
        'PORT': env_config['database']['port'],
        'OPTIONS': env_config['database'].get('options', {}),    # 可选配置
    }
}

REDIS_CONFIG = env_config['redis']
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f"redis://{REDIS_CONFIG['host']}:{REDIS_CONFIG['port']}/{REDIS_CONFIG['db_cache']}",
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'PASSWORD': REDIS_CONFIG.get('password'),
        },
        'TIMEOUT': 300,
        'KEY_PREFIX': 'cache',
    },
    'session': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f"redis://{REDIS_CONFIG['host']}:{REDIS_CONFIG['port']}/{REDIS_CONFIG['db_session']}",
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'PASSWORD': REDIS_CONFIG.get('password'),
        },
        'TIMEOUT': 86400,  # 会话一般更长
        'KEY_PREFIX': 'session',
    },
    'temp': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f"redis://{REDIS_CONFIG['host']}:{REDIS_CONFIG['port']}/{REDIS_CONFIG['db_temp']}",
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'PASSWORD': REDIS_CONFIG.get('password'),
        },
        'TIMEOUT': 60,
        'KEY_PREFIX': 'temp',
    },
}

CELERY_BROKER_URL = env_config['celery']['broker_url'].format(
    password=REDIS_CONFIG['password'],
    host=REDIS_CONFIG['host'],
    port=REDIS_CONFIG['port'],
    db=REDIS_CONFIG['db_celery_broker']
)

CELERY_RESULT_BACKEND = env_config['celery']['result_backend'].format(
    password=REDIS_CONFIG['password'],
    host=REDIS_CONFIG['host'],
    port=REDIS_CONFIG['port'],
    db=REDIS_CONFIG['db_celery_backend']
)

CELERY_TASK_ALWAYS_EAGER = env_config['celery']['task_always_eager']
CELERY_TASK_SERIALIZER = env_config['celery']['task_serializer']
CELERY_RESULT_SERIALIZER = env_config['celery']['result_serializer']
CELERY_ACCEPT_CONTENT = env_config['celery']['accept_content']
CELERY_TIMEZONE = env_config['celery']['timezone']
CELERY_ENABLE_UTC = env_config['celery']['enable_utc']

ALLOWED_HOSTS = ['localhost', '127.0.0.1', '[::1]']

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users',
    'django_filters',
    'rest_framework',
    'drf_spectacular',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'silk',
    'events',
    'system',
    'channels',
    'record',
    'basic',
    'xc'
]

# DRF
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'common.pagination.FrontendCompatiblePagination',
    'DEFAULT_RENDERER_CLASSES': [
        'common.renderers.StandardJSONRenderer',
        'rest_framework.renderers.JSONRenderer',          # 保留原生备用
        'rest_framework.renderers.BrowsableAPIRenderer',  # 开发用
    ],
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',  # 默认需要认证
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',       # 搜索
        'rest_framework.filters.OrderingFilter',     # 排序
    ],
    'EXCEPTION_HANDLER': 'common.custom_exception_handler',
    'DATETIME_FORMAT': '%Y-%m-%d %H:%M:%S',          # 统一日期时间格式
    'DATE_FORMAT': '%Y-%m-%d',                       # 日期格式
    'TIME_FORMAT': '%H:%M:%S',                       # 时间格式

    'COERCE_DECIMAL_TO_STRING': False,               # 数字保持原格式
    'UNICODE_JSON': True,                            # 支持Unicode
}

# 媒体文件配置
MEDIA_URL = '/media/'
if platform.system().lower() == 'windows':
    MEDIA_ROOT = r'D:/media'
else:
    # 项目根目录下的 media/ 文件夹
    MEDIA_ROOT = BASE_DIR / 'media'

# JWT 配置（可选自定义）
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60*72),  # 访问 Token 有效期
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),        # 刷新 Token 有效期
    'ROTATE_REFRESH_TOKENS': True,                      # 是否轮换刷新 Token
    'BLACKLIST_AFTER_ROTATION': True,                   # 刷新后旧 Token 是否加入黑名单
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'AUTH_HEADER_TYPES': ('Bearer',),
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'silk.middleware.SilkyMiddleware',
]

ROOT_URLCONF = 'server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'server.wsgi.application'
# Channels 配置 ASGI 应用程序
ASGI_APPLICATION = 'server.asgi.application'
# ====== Django Channels (WebSocket) ======
if DEBUG:
    CHANNEL_LAYERS = {
        'default': {
            'BACKEND': 'channels.layers.InMemoryChannelLayer'
        }
    }
else:
    # 生产环境建议使用 Redis：
    CHANNEL_LAYERS = {
        "default": {
            "BACKEND": "channels_redis.core.RedisChannelLayer",
            "CONFIG": {
                "hosts": [{
                    "address": (REDIS_CONFIG['host'], REDIS_CONFIG['port']),
                    "password": REDIS_CONFIG.get('password'),
                    "db": REDIS_CONFIG.get('db_channels', 2),  # 建议用不同 DB
                    "retry_on_timeout": True,
                }],
            },
        },
    }


AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

LANGUAGE_CODE = 'zh-hans'  # 简体中文
TIME_ZONE = 'Asia/Shanghai'
USE_I18N = True
USE_TZ = True

STATIC_URL = 'static/'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 确保日志目录存在
LOGS_DIR = os.path.join(BASE_DIR, 'logs')
os.makedirs(LOGS_DIR, exist_ok=True)

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
        'file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOGS_DIR, 'django.log'),
            'maxBytes': 5 * 1024 * 1024,
            'backupCount': 5,
            'formatter': 'verbose',
        }
    },
    'root': {
        'handlers': ['console'],
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.db.backends': {
            'handlers': ['console'] if DEBUG else [],  # 生产环境完全关闭 console 输出
            'level': 'INFO' if DEBUG else 'WARNING',
            'propagate': False,
        },
        'ms': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        },
    },
}

AUTH_USER_MODEL = 'users.User'
ENCRYPTION_KEY = 'wngqcvtz9Su2mU1VGQhXbvmzEioE-2oONQ9UEqL9-bg='

# 签发认证信息配置
SIGN_CIPHER_KEY = 'Sl^i+U!qIJhr!O3uW*yn^mud9_J_+$F9'
SIGN_HTTP_NAME = 'HTTP_AUTHORIZATION'
SIGN_HTTP_NAME_EXTRA = 'HTTP_XD_TOKEN'
SIGN_SUBSCRIPTION_NAME = 'token'

