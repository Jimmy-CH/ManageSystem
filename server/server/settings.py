"""
Django settings for server project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""
import os
import yaml
from pathlib import Path
from datetime import timedelta
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
ENVIRONMENT = os.environ.get('DJANGO_ENV', 'development')


CONFIG_FILE = BASE_DIR / 'config.yml'  # 或者 settings/config.yml


def load_yaml_config():
    try:
        with open(CONFIG_FILE, 'r', encoding='utf-8') as file:
            return yaml.safe_load(file)
    except FileNotFoundError:
        raise ImproperlyConfigured(f"Config file {CONFIG_FILE} not found.")
    except yaml.YAMLError as e:
        raise ImproperlyConfigured(f"Error parsing YAML config: {e}")


# 加载配置
config_data = load_yaml_config()

# 获取当前环境的配置
try:
    env_config = config_data[ENVIRONMENT]
except KeyError:
    raise ImproperlyConfigured(f"Environment '{ENVIRONMENT}' not found in config.yml.")

# 应用配置到 Django settings
SECRET_KEY = env_config['secret_key']
DEBUG = env_config['debug']
# 数据库 (MySQL)
DATABASES = {
    'default': {
        'ENGINE': env_config['database']['engine'],
        'NAME': env_config['database']['name'],
        'USER': env_config['database']['user'],
        'PASSWORD': env_config['database']['password'],
        'HOST': env_config['database']['host'],
        'PORT': env_config['database']['port'],
        'OPTIONS': env_config['database'].get('options', {}),    # 可选配置
    }
}

# 缓存 (Redis)
REDIS_CONFIG = env_config['redis']
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f"redis://{REDIS_CONFIG['host']}:{REDIS_CONFIG['port']}/{REDIS_CONFIG['db_cache']}",
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'PASSWORD': REDIS_CONFIG.get('password'),
        },
        'TIMEOUT': 300,
        'KEY_PREFIX': 'cache',
    },
    'session': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f"redis://{REDIS_CONFIG['host']}:{REDIS_CONFIG['port']}/{REDIS_CONFIG['db_session']}",
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'PASSWORD': REDIS_CONFIG.get('password'),
        },
        'TIMEOUT': 86400,  # 会话一般更长
        'KEY_PREFIX': 'session',
    },
    'temp': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f"redis://{REDIS_CONFIG['host']}:{REDIS_CONFIG['port']}/{REDIS_CONFIG['db_temp']}",
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'PASSWORD': REDIS_CONFIG.get('password'),
        },
        'TIMEOUT': 60,
        'KEY_PREFIX': 'temp',
    },
}

# --- Celery 配置 ---
CELERY_BROKER_URL = env_config['celery']['broker_url'].format(
    password=REDIS_CONFIG['password'],
    host=REDIS_CONFIG['host'],
    port=REDIS_CONFIG['port'],
    db=REDIS_CONFIG['db_celery_broker']
)

CELERY_RESULT_BACKEND = env_config['celery']['result_backend'].format(
    password=REDIS_CONFIG['password'],
    host=REDIS_CONFIG['host'],
    port=REDIS_CONFIG['port'],
    db=REDIS_CONFIG['db_celery_backend']
)

# 其他 Celery 设置 (可以直接定义或通过环境变量传递给 Celery)
CELERY_TASK_ALWAYS_EAGER = env_config['celery']['task_always_eager']
CELERY_TASK_SERIALIZER = env_config['celery']['task_serializer']
CELERY_RESULT_SERIALIZER = env_config['celery']['result_serializer']
CELERY_ACCEPT_CONTENT = env_config['celery']['accept_content']
CELERY_TIMEZONE = env_config['celery']['timezone']
CELERY_ENABLE_UTC = env_config['celery']['enable_utc']

# --- 其他 Django 设置 (保持不变或根据需要添加) ---
ALLOWED_HOSTS = ['localhost', '127.0.0.1', '[::1]']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_filters',
    'rest_framework',
    'drf_spectacular',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'events',
    'users',
    'system',
]

# DRF
REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',  # 默认需要认证
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'EXCEPTION_HANDLER': 'common.custom_exception_handler',
    'DATETIME_FORMAT': '%Y-%m-%d %H:%M:%S',  # 统一日期时间格式
    'DATE_FORMAT': '%Y-%m-%d',  # 日期格式
    'TIME_FORMAT': '%H:%M:%S',  # 时间格式

    'COERCE_DECIMAL_TO_STRING': False,  # 数字保持原格式
    'UNICODE_JSON': True,  # 支持Unicode
}

# 媒体文件配置
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'  # 例如：项目根目录下的 media/ 文件夹

# JWT 配置（可选自定义）
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60*24),  # 访问 Token 有效期
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),     # 刷新 Token 有效期
    'ROTATE_REFRESH_TOKENS': True,                   # 是否轮换刷新 Token
    'BLACKLIST_AFTER_ROTATION': True,                # 刷新后旧 Token 是否加入黑名单
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'AUTH_HEADER_TYPES': ('Bearer',),
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 'middlewares.response_middleware.UnifiedResponseMiddleware',  # 这个中间件会使swagger的输出收到影响
]

ROOT_URLCONF = 'server.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'server.wsgi.application'


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# 日志目录（确保该目录存在且有写权限）
LOGS_ROOT = Path(BASE_DIR / "logs")
LOGS_ROOT.mkdir(exist_ok=True)  # 自动创建 logs 目录

# 日志轮转大小（100MB）
LOG_SIZE = 100 * 1024 * 1024  # 100MB
LOG_BACKUP_COUNT = 30  # 保留30个备份

# 自定义日志格式
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,  # 注意：设为 False，避免禁用 Django 默认日志器

    # 格式化器
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
        'detailed': {
            'format': '{levelname} {asctime} {module}.{funcName}():{lineno} - {message}',
            'style': '{',
        },
        'json': {
            '()': 'pythonjsonlogger.jsonlogger.JsonFormatter',
            'format': '%(asctime)s %(levelname)s %(name)s %(module)s %(funcName)s %(lineno)d %(message)s',
        },
    },

    # 处理器：决定日志输出方式
    'handlers': {
        # 控制台输出（开发时有用，生产可关闭或保留 ERROR）
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },

        # INFO 及以上日志，按大小轮转
        'file_info': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_ROOT / 'info.log',
            'maxBytes': LOG_SIZE,
            'backupCount': LOG_BACKUP_COUNT,
            'formatter': 'verbose',
            'encoding': 'utf-8',
        },

        # ERROR 和 CRITICAL 单独记录
        'file_error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_ROOT / 'error.log',
            'maxBytes': LOG_SIZE,
            'backupCount': 30,
            'formatter': 'detailed',
            'encoding': 'utf-8',
        },

        # Django 框架日志（数据库、请求、启动等）
        'django_file': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_ROOT / 'django.log',
            'maxBytes': LOG_SIZE,
            'backupCount': LOG_BACKUP_COUNT,
            'formatter': 'verbose',
            'encoding': 'utf-8',
        },

        # 安全相关日志（如登录失败、权限拒绝）
        'security_file': {
            'level': 'WARNING',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': LOGS_ROOT / 'security.log',
            'maxBytes': LOG_SIZE,
            'backupCount': 90,  # 安全日志保留更久
            'formatter': 'detailed',
            'encoding': 'utf-8',
        },

        # 可选：发送严重错误到邮箱
        'mail_admins': {
            'level': 'CRITICAL',
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True,
            'formatter': 'detailed',
        },

        # 可选：集成 Sentry（推荐用于生产错误监控）
        # 'sentry': {
        #     'level': 'ERROR',
        #     'class': 'sentry_sdk.integrations.logging.EventHandler',
        # },
    },

    # 日志器（Logger）
    'loggers': {
        # 主应用日志
        'server': {
            'handlers': ['file_info', 'file_error', 'console'],
            'level': 'DEBUG',  # 👈 开发环境设为 DEBUG
            'propagate': False,
        },

        # Django 核心日志
        'django': {
            'handlers': ['django_file', 'file_error'],
            'level': 'INFO',
            'propagate': False,
        },

        # Django 请求日志（可选开启 DEBUG 级别）
        'django.request': {
            'handlers': ['file_error', 'security_file', 'mail_admins'],
            'level': 'WARNING',  # 只记录 WARNING 及以上
            'propagate': False,
        },

        # Django 认证和权限（安全敏感）
        'django.security': {
            'handlers': ['security_file', 'mail_admins'],
            'level': 'WARNING',
            'propagate': False,
        },

        # 数据库查询日志（生产环境建议关闭，或设为 WARNING）
        'django.db.backends': {
            'handlers': ['file_error'],
            'level': 'WARNING',  # 生产环境不要记录所有 SQL
            'propagate': False,
        },

        # 第三方库控制（避免日志过多）
        'requests': {
            'handlers': ['file_info'],
            'level': 'WARNING',
            'propagate': False,
        },
        'urllib3': {
            'handlers': ['file_info'],
            'level': 'WARNING',
            'propagate': False,
        },
    },
}


AUTH_USER_MODEL = 'users.User'  # 替换为你的应用名
